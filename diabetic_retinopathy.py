# -*- coding: utf-8 -*-
"""diabetic retinopathy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qf7GhjgeEpmfXagcohDxl7DD7UPxdEOh
"""

! pip install kaggle

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

#DATASET DOWNLOADING

! kaggle datasets download -d arbethi/diabetic-retinopathy-level-detection

! unzip diabetic-retinopathy-level-detection.zip

imageSize = [299, 299]
trainPath = r"/content/preprocessed dataset/preprocessed dataset/training"
testPath = r"/content/preprocessed dataset/preprocessed dataset/testing"

from tensorflow.keras.layers import Dense, Flatten, Input
from tensorflow.keras.models import Model,load_model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.applications.xception import Xception, preprocess_input
from glob import glob
import numpy as np
import matplotlib.pyplot as plt

train_datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True, vertical_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)
type(train_datagen)

training_set =train_datagen.flow_from_directory(trainPath, target_size = (299,299),batch_size = 32, class_mode = 'categorical')
test_set = test_datagen.flow_from_directory(testPath, target_size = (299,299),batch_size = 32, class_mode = 'categorical')

#MODEL BUILDING

xception = Xception(input_shape = imageSize + [3], weights = 'imagenet', include_top = False)

#don't train existing weights
for layer in xception.layers:
  layer.trainable = False

#our layers - you can add more if you want
x = Flatten()(xception.output)

prediction = Dense(5, activation = 'softmax')(x)

#create a model object
model = Model(inputs = xception.input, outputs = prediction)

#view the structure of the model
model.summary()

model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

#fit the model
r = model.fit_generator(training_set, validation_data = test_set, epochs = 30, steps_per_epoch = len(training_set)//32, validation_steps = len(test_set)//32)